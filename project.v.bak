// Part 2 skeleton

module project
	(
		CLOCK_50,						//	On Board 50 MHz
		SW,						
		KEY,								// On Board Keys
		LEDR,
		// The ports below are for the VGA output.  Do not change.
		VGA_CLK,   						//	VGA Clock
		VGA_HS,							//	VGA H_SYNC
		VGA_VS,							//	VGA V_SYNC
		VGA_BLANK_N,					//	VGA BLANK
		VGA_SYNC_N,						//	VGA SYNC
		VGA_R,   						//	VGA Red[9:0]
		VGA_G,	 						//	VGA Green[9:0]
		VGA_B   							//	VGA Blue[9:0]
	);

	input			CLOCK_50;			//	50 MHz
	input	[3:0]	KEY;					
	input [9:0] SW;
	output [9:0] LEDR; 
	
	// Do not change the following outputs
	output			VGA_CLK;   				//	VGA Clock
	output			VGA_HS;					//	VGA H_SYNC
	output			VGA_VS;					//	VGA V_SYNC
	output			VGA_BLANK_N;			//	VGA BLANK
	output			VGA_SYNC_N;				//	VGA SYNC
	output	[7:0]	VGA_R;   				//	VGA Red[7:0] Changed from 10 to 8-bit DAC
	output	[7:0]	VGA_G;	 				//	VGA Green[7:0]
	output	[7:0]	VGA_B;					//	VGA Blue[7:0]
	
	wire resetn;
	assign resetn = KEY[0];
	
	// Create the colour, x, y and writeEn wires that are inputs to the controller.

	wire [2:0] colour;
	wire [7:0] x;
	wire [6:0] y;
	wire writeEn;
	
	// Create an Instance of a VGA controller - there can be only one!
	// Define the number of colours as well as the initial background
	// image file (.MIF) for the controller.
	vga_adapter VGA(
			.resetn(resetn),
			.clock(CLOCK_50),
			.colour(colour),
			.x(x),
			.y(y),
			.plot(writeEn),
			/* Signals for the DAC to drive the monitor. */
			.VGA_R(VGA_R),
			.VGA_G(VGA_G),
			.VGA_B(VGA_B),
			.VGA_HS(VGA_HS),
			.VGA_VS(VGA_VS),
			.VGA_BLANK(VGA_BLANK_N),
			.VGA_SYNC(VGA_SYNC_N),
			.VGA_CLK(VGA_CLK));
		defparam VGA.RESOLUTION = "20x20";
		defparam VGA.MONOCHROME = "FALSE";
		defparam VGA.BITS_PER_COLOUR_CHANNEL = 8;
		defparam VGA.BACKGROUND_IMAGE = "stage1_bkg.mif";
			
	// Put your code here. Your code should produce signals x,y,colour and writeEn
	// for the VGA controller, in addition to any other functionality your design may require.	
	
	wire ld_x, ld_y, ld_r,ld_b; 
	wire [3:0] counter; 
	wire [7:0] xcounter;
	

	control c0(CLOCK_50, resetn, KEY[3], KEY[1], KEY[2], counter, ld_x, ld_y, writeEn, ld_b, xcounter); 
	datapath d0(CLOCK_50, resetn, SW[6:0], ld_y, ld_x, writeEn, ld_b, x, y, counter, colour, SW[9:7], xcounter); 
	
endmodule

module control (
	input clk, resetn, loadX, loadP, loadB,
	input [3:0] counter,
	output reg ld_x, ld_y, ld_r, ld_b,
	input [7:0] xcounter
	);	
	
	localparam 	 setXwait   = 5'd1,
					 setX 		= 5'd2,
                setY       = 5'd3,
                setYwait   = 5'd4,
                Plot		   = 5'd6,
					 setBlack   = 5'd7,
					 blackLoop  = 5'd8,
					 Wait  		= 5'd9;
	
	reg [3:0] current_state, next_state; 
	
	always@(*)
   begin: state_table 
			case (current_state)
				Wait: next_state = loadP ? setXwait : Wait; 
				setXwait : begin
					if (loadX == 0)
						next_state = setX; 
					else if (loadP == 0)
						next_state = setY; 
					else 
						next_state = setXwait; 
				end
				setX: begin
					if (loadP == 0)
						next_state = setY; 
					else 
						next_state = setX;  
				end
				setY: begin
					next_state = setYwait; 
				end
				setYwait: begin 
					next_state = loadP ? Plot : setYwait; 
				end
				Plot: begin
					if (counter == 4'b1111)
						next_state = Wait; 
					else 
						next_state = Plot; 
				end
				setBlack: begin 
					next_state = loadB ? blackLoop : setBlack; 
				end
				blackLoop: begin
					if(xcounter == 8'd160) 
						next_state = Wait; 
					else 
						next_state = blackLoop; 
				end
			default: next_state = Wait; 
        endcase
    end // state_table
	 
	always@(posedge clk)
	begin: logic
	
		ld_x = 0;
		ld_y = 0;
		ld_r = 0;
		ld_b = 0;
		
		case (current_state)
			
			setX: begin
				ld_r = 0;
				ld_y = 0;
				ld_x = 1;
			end
			
			setY: begin
				ld_r = 0;
				ld_x = 0;
				ld_y = 1; 
			end
			
			Plot: begin 
				ld_r = 1; 
			end
			setBlack: begin 
				ld_b = 1; 
				ld_r = 1; 
			end
			
		endcase 
	end
	
	 // current_state registers
    always@(posedge clk)
    begin: state_FFs
        if(!resetn)
            current_state <= setXwait;
			else if (!loadB)
				current_state <= setBlack; 
        else
            current_state <= next_state;
    end // state_FFS
endmodule

module datapath (
	input clk, resetn,
	input [6:0] datain,
	input ld_y, ld_x, ld_r, ld_b,
	output reg [7:0] x,
	output reg [6:0] y,
	output reg [3:0] counter,
	output reg [2:0] colour,
	input [2:0] inC,
	output reg [7:0] xcounter
	);
	
	reg [7:0] px;
	reg [6:0] py; 
	reg [7:0] ycounter;
	initial ycounter = 8'b0;
	
	always @(posedge clk) begin		
		if (!resetn) begin
			px <= 0;
			py <= 0;
			counter <= 0;
			colour <= 0; 
			x <= 0;
			y <= 0; 
		end
		else begin
			if (ld_x) begin
				px <= {1'b0, datain[6:0]};
				counter <= 0;
			end
			else if (ld_y) begin 
				py <= datain[6:0];
				counter <= 0;
			end
			else if (ld_b) begin
				if (ycounter == 8'd120) begin
					xcounter <= xcounter + 1; 
					ycounter <= 8'd0; 
				end
				else if (ycounter < 8'd120)
					ycounter <= ycounter + 1; 
					
				x <= xcounter; 
				y <= ycounter; 
				colour <= 3'b000; 
			end
			else if (ld_r && !ld_b) begin 
				if (counter < 4'b1111)
					counter <= counter + 1; 
				else if (counter == 4'b1111) 
					counter <= 0; 
					
				x <= px + counter[1:0];
				y <= py + counter[3:2];
				colour <= inC; 
			end
		end 
	end
	
	 
 endmodule 

// module single_port_rom (
//    input [(ADDR_WIDTH-1):0] addr,
//    input clk, 
//    output reg [(DATA_WIDTH-1):0] q
//	);
//
//	 parameter DATA_WIDTH=16;
//	 parameter ADDR_WIDTH=16;
//
//    // Declare the ROM variable
//    reg [DATA_WIDTH-1:0] rom[2**ADDR_WIDTH-1:0];
//
//    initial
//    begin
//        $readmemh("mario.bmp", rom);
//    end
//
//    always @ (posedge clk)
//    begin
//        q <= rom[addr];
//    end
//
//endmodule
//
////const unsigned char bitmapArray [] = {
////0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x70, 0x70, 0x70, 0x78, 0x78, 0x7c, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x3c, 0x38, 0x38, 0x30, 0x30, 0x30, 0x30, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0x80, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xc0, 0xc0, 0xc0, 0x0e, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0xff, 0xff, 0xfe, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0xfc, 0x7c, 0x7e, 0x3e, 0x3f, 0x3f, 0x3e, 0x3e, 0x3e, 0x7c, 0xfc, 0xf0, 0xe0, 0xe0, 0xe0, 0xe0, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0xe0, 0xf0, 0xf0, 0xf0, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xfe, 0xfe, 0xfe, 0xfe, 0x7f, 0x7f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x3f, 0x7f, 0x7e, 0xfe, 0xfe, 0xfe, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xf0, 0xf0, 0xf0, 0xe0, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x03, 0x03, 0x01, 0x01, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0x01, 0x01, 0x01, 0x03, 0x03, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
////};



